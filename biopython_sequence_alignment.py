# -*- coding: utf-8 -*-
"""BioPython: Sequence Alignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BHirw-ZbPrkt0c5cPyUco4L94IAnFwRs

Overview:

1. The AlignIO Module
> Functions: parse(), read(), write(), ...

2. The SeqRecord & MultipleSeqAlignment Module
>Compile your alignment sequences
3. The Bio.Align.Applications
> Command Line Wrappers of Alignment Tools

> Local and Global Alignment

4. The pairwise2 module
> Blosum62 Substitution Matrix
"""

pip install biopython

from Bio import AlignIO
help(AlignIO)

# Reading Sequence Alignment 
# Bio.AlignIO.read() and Bio.AlignIO.parse()

# Bio.AlignIO.read() <- contains only a single alignment
# Bio.AlignIO.parse() <- multiple different alignments (Resampled or multiple pair-wise)

from Bio import AlignIO
alignment = AlignIO.read("PF00533_seed.txt", "fasta") # note the file format
#print(alignment)
print()
print("Number of rows: %i" % len(alignment))
for record in alignment:
  print("%s - %s" % (record.seq, record.id))



# https://pfam.xfam.org/search#tabview=tab0
# PDB, NCBI, EMBL
# File Formats: https://biopython.org/wiki/AlignIO

# Splicing 
print(len(alignment))
# print(alignment[3:7])
print(alignment[:, 15]) # column 
#print(alignment[0].seq[15]) # First sequence [0], 15th index

# Remove a section

# print(alignment[:, :15]) # Everything upto 15th index
#print(alignment[:, 35:]) # Everything after 35th column

edited = alignment[:, :15] + alignment[:, 35:45]
# print(edited)

# Sort based on id
edited.sort()
print(edited)

## Sequences cross-referenced to the PDB and associated secondary structure

alignment = AlignIO.read("PF00533_seed.txt", "fasta")
for record in alignment:
  if record.dbxrefs:
    print('%s %s' %(record.id, record.dbxrefs))

# Sequence Annotations

for record in alignment:
  print(record)
  print()

# Creating Multiple Sequence Alignment Object (hard way)
# Note the use of SeqRecord Object 

from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Align import MultipleSeqAlignment
align1 = MultipleSeqAlignment(
    [
     SeqRecord(Seq("ACTGCTAGCTAG"), id="Alpha"),
     SeqRecord(Seq("ACT-CTAGCTAG"), id="Beta"),
     SeqRecord(Seq("ACTGCTAGDTAG"), id="Gamma"),
     ])

align2 = MultipleSeqAlignment(
     [
      SeqRecord(Seq("GTCAGC-AG"), id="Delta"),
      SeqRecord(Seq("GACAGCTAG"), id="Epsilon"),
      SeqRecord(Seq("GTCAGCTAG"), id="Zeta"),
      ])
align3 = MultipleSeqAlignment(
    [SeqRecord(Seq("ACTAGTACAGCTG"), id="Eta"),
     SeqRecord(Seq("ACTAGTACAGCT-"), id="Theta"),
     SeqRecord(Seq("-CTACTACAGGTG"), id="Iota"),
     ])

my_alignments = [align1, align2, align3]
print(my_alignments)
for alignment in my_alignments:
  print(alignment)
  print()

# Writing Alignment

from Bio import AlignIO
AlignIO.write(my_alignments, "my_example.phy", "phylip")

# Parse through the my_example.phy

for alignment in AlignIO.parse("my_example.phy", "phylip"):
  print("Alignment length %i" % alignment.get_alignment_length())
  for record in alignment:
    print("%s - %s" % (record.seq, record.id))
  print()

# Substitution Matrix - [# of times two letters aligned to each other/ sum of all pairs]
# True probability of mutations occuring through a period of evolution 
# Two types PAM and BLOSUM 

from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Align import MultipleSeqAlignment
alignment = MultipleSeqAlignment(
    [
    SeqRecord(Seq("ACTCCTA"), id='seq1'),
    SeqRecord(Seq("AAT-CTA"), id='seq2'),
    SeqRecord(Seq("CCTACT-"), id='seq3'),
    SeqRecord(Seq("TCTCCTC"), id='seq4')
    ]
)
print(alignment)
print()

substitutions = alignment.substitutions
print(substitutions)

# Add entries for missing letters
m = substitutions.select("ACTG")
# print(m)

# Alignment Tools - both for pairwise and multiple sequence alignments

# Bio.pairwise2 module

import Bio.Align.Applications
dir(Bio.Align.Applications) # Command line wrappers

# ClustalW (MSA Tool)

from Bio.Align.Applications import ClustalwCommandline
help(ClustalwCommandline) 

cline = ClustalwCommandline("clustalw2", infile="opuntia.fasta") # Note version 2
#print(cline)


"""
# ~ Copy and paste the following code to your local python IDLE ~

#  Two output files: the alignment and the guide tree

clustalw_exe = r"C:/Program Files (x86)/ClustalW2/clustalw2.exe" # Path may differ for you
clustalw_cline = ClustalwCommandline(clustalw_exe, infile="opuntia.fasta") # Path to the fasta file
assert os.path.isfile(clustalw_exe), "Clustal W executable missing"
stdout, stderr = clustalw_cline()

# Reading Alignment Output file: opuntia.aln
from Bio import AlignIO
align = AlignIO.read("opuntia.aln", "clustal") # output format .aln for clustalW
print(align)

# Reading Newick tree file: opuntia.dnd
from Bio import Phylo
tree = Phylo.read("opuntia.dnd", "newick") 
Phylo.draw_ascii(tree)
"""

# https://raw.githubusercontent.com/biopython/biopython/master/Doc/examples/opuntia.fasta
# http://www.clustal.org/download/current/

# MUSCLE (Another MSA Tool) 
# Debug and get it to work

from Bio.Align.Applications import MuscleCommandline
cline = MuscleCommandline(input="opuntia.fasta", out="opuntia.txt")
print(cline)
# help(MuscleCommandline)

'''
from Bio.Align.Applications import MuscleCommandline
muscle_cline = MuscleCommandline(input="opuntia.fasta")
stdout, stderr = muscle_cline()
from io import StringIO
from Bio import AlignIO
align = AlignIO.read(StringIO(stdout), "fasta")
print(align)
'''

# http://www.drive5.com/muscle/downloads.htm
# Follow 6.5.3/4  MUSCLE using stdin and stdout in BioPython Cook Book

# EMBOSS needle and water tool:
# Smith-Waterman algorithm local alignment
# Needleman-Wunsch global alignment

# Available in Linux system

file = open('alpha.faa','w') 
file.write('>HBA_HUMAN' + '\n')
file.write('MVLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHG'+ '\n')
file.write('KKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTP'+ '\n')
file.write('AVHASLDKFLASVSTVLTSKYR'+ '\n')
file.close() 

file = open('beta.faa','w') 
file.write('>HBB_HUMAN'+ '\n')
file.write('MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPK'+ '\n')
file.write('VKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFG'+ '\n')
file.write('KEFTPPVQAAYQKVVAGVANALAHKYH'+ '\n')
file.close() 

from Bio.Emboss.Applications import NeedleCommandline
needle_cline = NeedleCommandline(asequence="alpha.faa", bsequence="beta.faa",
                                 gapopen=10, gapextend=0.5, outfile="needle.txt")
print(needle_cline)

'''
from Bio import AlignIO
align = AlignIO.read("needle.txt", "emboss")
print(align)
'''

# Follow 6.5.5  EMBOSS needle and water in BioPython Cook Book

# Pairwise Sequence Alignment
# process of aligning two sequences to each other by optimizing the similarity score between them
# global and local alignments

from Bio import pairwise2
from Bio import SeqIO
seq1 = SeqIO.read("alpha.faa", "fasta")
seq2 = SeqIO.read("beta.faa", "fasta")
alignments = pairwise2.align.globalxx(seq1.seq, seq2.seq)  # For local alignment use localxx
# xx = match counts 1 while mismatches have no costs, no gap costs

print(len(alignments))
print(alignments[0])
# Output: two aligned sequences, the score, the start and the end positions of the alignment 

# Nicer format
print(pairwise2.format_alignment(*alignments[0]))

# Better alignments are usually obtained by penalizing gaps: 
# higher costs for opening a gap and lower costs for extending an existing gap

# BLOSUM62 matrix with a gap open penalty of 10 and a gap extension penalty of 0.5

from Bio import pairwise2
from Bio import SeqIO
from Bio.Align import substitution_matrices
blosum62 = substitution_matrices.load("BLOSUM62")
alignments = pairwise2.align.globalds(seq1.seq, seq2.seq, blosum62, -10, -0.5) # For local Alignment use localds
print(len(alignments))
# print(blosum62)
print(pairwise2.format_alignment(*alignments[0]))

#help(pairwise2)

"""# Additional Resources

1.   https://github.com/appbrewery/100-days-of-python
2.   http://biopython.org/DIST/docs/tutorial/Tutorial.html
3.   https://github.com/crazyhottommy/getting-started-with-genomics-tools-and-resources

"""